name: Arch AUR Repository Build

on:
  push:
  pull_request:
  schedule:
    - cron:  '1 7 * * 0'

jobs:
  # build-x86_64:
  #   runs-on: ubuntu-latest
  #   name: Build on x86_64

  #   container:
  #     image: archlinux:latest
  #     options: --privileged

  #     env:
  #       PKGEXT: .pkg.tar.zst

  #   steps:
  #     - name: Set variables
  #       id: set-vars
  #       run: |
  #         echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M')"
  #         echo "::set-output name=repo-id::$(echo ${{ github.repository }} | sed 's/\//-/g')"

  #     - name: Prepare repo
  #       id: prepare
  #       run: |
  #         echo "::set-output name=arch::$(uname -m)"
  #         pacman -Syyu --noconfirm
  #         pacman -S --noconfirm base-devel sudo
  #         echo 'auruser ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/auruser
  #         useradd -m auruser
  #         cd /tmp
  #         curl --output aurutils.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/aurutils.tar.gz
  #         tar xf aurutils.tar.gz
  #         chmod -R 777 /tmp/aurutils
  #         cd aurutils
  #         sudo -u auruser makepkg --syncdeps --noconfirm
  #         pacman -U --noconfirm aurutils-*.pkg.*
  #         cp -v /tmp/aurutils/aurutils-*.pkg.* ${GITHUB_WORKSPACE}
  #         export REPO_IDENTIFIER="${{ steps.set-vars.outputs.repo-id }}"
  #         repo-add ${GITHUB_WORKSPACE}/${REPO_IDENTIFIER}.db.tar.gz ${GITHUB_WORKSPACE}/aurutils-*.pkg.*
  #         chmod -R 777 ${GITHUB_WORKSPACE}
  #         echo "# local repository (required by aur tools to be set up)" >> /etc/pacman.conf
  #         echo "[${REPO_IDENTIFIER}]" >> /etc/pacman.conf
  #         echo "SigLevel = Optional TrustAll" >> /etc/pacman.conf
  #         echo "Server = file://${GITHUB_WORKSPACE} " >> /etc/pacman.conf
  #         pacman -Sy --noconfirm
  #         # 在此处安装其他需要的包
  #         for pkg in emacs-git
  #         do
  #           echo "### Package ${pkg}"
  #           sudo -u auruser aur sync --noconfirm --noview --database ${REPO_IDENTIFIER} --root ${GITHUB_WORKSPACE} ${pkg} || echo "!!! Package ${pkg} failed"
  #         done
  #         chmod -R 777 ${GITHUB_WORKSPACE}

  #     - name: Remove symbolic links
  #       run: |
  #         cd ${GITHUB_WORKSPACE}
  #         ls -al
  #         rm -v ${{ steps.set-vars.outputs.repo-id }}.db ${{ steps.set-vars.outputs.repo-id }}.files
  #         cp -v ${{ steps.set-vars.outputs.repo-id }}.db.tar.gz ${{ steps.set-vars.outputs.repo-id }}.db
  #         cp -v ${{ steps.set-vars.outputs.repo-id }}.files.tar.gz ${{ steps.set-vars.outputs.repo-id }}.files
  #         rm -fv build-log.txt *.sh
  #         ls -al

  #     - name: Remove release
  #       uses: cb80/delrel@latest
  #       with:
  #         tag: ${{ steps.prepare.outputs.arch }}
  #         token: ${{ secrets.TOKEN }}

  #     - name: Upload release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         tag: ${{ steps.prepare.outputs.arch }}
  #         name: Arch Linux AUR Build ${{ github.run_number }} from ${{ steps.set-vars.outputs.date }} for ${{ steps.prepare.outputs.arch }}
  #         body: |
  #           To use this repository, please append the following to `/etc/pacman.conf`:
  #           ```
  #           [${{ steps.set-vars.outputs.repo-id }}]
  #           SigLevel = Required
  #           Server = https://github.com/${{ github.repository }}/releases/download/${{ steps.prepare.outputs.arch }}
  #           ```
  #         artifacts: |
  #           ${{ github.workspace }}/*
  #         draft: false
  #         prerelease: false
  #         token: ${{ secrets.TOKEN }}

  build-arm:
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.arch }}

    strategy:
      matrix:
        include:
          - arch: aarch64

    steps:
      - name: Set variables
        id: set-vars
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M')"
          echo "::set-output name=repo-id::$(echo ${{ github.repository }} | sed 's/\//-/g')"

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_NAME="Arch Linux ARM AUR Build ${{ github.run_number }} from ${{ steps.set-vars.outputs.date }} for ${{ matrix.arch }}"
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ matrix.arch }}"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" $API_URL)
          if echo "$RESPONSE" | grep -q "\"id\":"; then
            echo "Release already exists. Exiting."
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT

      - name: Exit if release exists
        if: steps.check_release.outputs.release_exists == 'true'
        run: echo "Release already exists. Skipping build."

      - name: Install necessary packages
        if: steps.check_release.outputs.release_exists != 'true'
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel sudo git curl

      - name: Set up sudoers
        if: steps.check_release.outputs.release_exists != 'true'
        run: |
          echo 'auruser ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/auruser
          useradd -m auruser

      - name: Install aurutils
        if: steps.check_release.outputs.release_exists != 'true'
        run: |
          curl --output aurutils.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/aurutils.tar.gz
          tar xf aurutils.tar.gz
          chmod -R 777 /tmp/aurutils
          cd aurutils
          sudo -u auruser makepkg --syncdeps --noconfirm
          pacman -U --noconfirm aurutils-*.pkg.*
          cd ..
          rm -rf aurutils aurutils.tar.gz
      
      - name: Clone, modify, and build packages
        if: steps.check_release.outputs.release_exists != 'true'
        run: |
          PACKAGES=(emacs-git)
          for pkg in "${PACKAGES[@]}"; do
            echo "### Processing package: $pkg"
            mkdir -p build/$pkg
            cd build/$pkg
            aur fetch $pkg
            cd $pkg
            if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
              sed -i "s/^arch=.*/arch=(x86_64 aarch64)/" PKGBUILD
            elif [[ "${{ matrix.arch }}" == "armv7" ]]; then
              sed -i "s/^arch=.*/arch=(armv7)/" PKGBUILD
            fi
            # 验证修改是否成功
            grep "^arch=" PKGBUILD
            # 构建包
            aur build --noconfirm --syncdeps --clean
            # 返回工作目录
            cd ../../../
          done

      - name: Verify PKGBUILD arch
        if: steps.check_release.outputs.release_exists != 'true'
        run: |
          PACKAGES=(emacs-git)
          for pkg in "${PACKAGES[@]}"; do
            echo "Verifying arch in build/$pkg/$pkg/PKGBUILD"
            grep "^arch=" build/$pkg/$pkg/PKGBUILD
          done

      - name: Add built packages to repository
        if: steps.check_release.outputs.release_exists != 'true'
        run: |
          REPO_IDENTIFIER="${{ steps.set-vars.outputs.repo-id }}"
          for pkg in "${PACKAGES[@]}"; do
            pacman -U --noconfirm build/$pkg/${pkg}-*.pkg.tar.zst
            repo-add ${REPO_IDENTIFIER}.db.tar.gz build/$pkg/${pkg}-*.pkg.tar.zst
          done
          cp ${REPO_IDENTIFIER}.db.tar.gz ${REPO_IDENTIFIER}.files.tar.gz $GITHUB_WORKSPACE/
          chmod -R 777 ${GITHUB_WORKSPACE}
          echo "# local repository (required by aur tools to be set up)" >> /etc/pacman.conf
          echo "[${REPO_IDENTIFIER}]" >> /etc/pacman.conf
          echo "SigLevel = Optional TrustAll" >> /etc/pacman.conf
          echo "Server = file://${GITHUB_WORKSPACE} " >> /etc/pacman.conf
          pacman -Sy --noconfirm
          
      - name: Remove symbolic links
        run: |
          cd "${{ runner.temp }}"
          rm -v ${{ steps.set-vars.outputs.repo-id }}.db ${{ steps.set-vars.outputs.repo-id }}.files
          cp -v ${{ steps.set-vars.outputs.repo-id }}.db.tar.gz ${{ steps.set-vars.outputs.repo-id }}.db
          cp -v ${{ steps.set-vars.outputs.repo-id }}.files.tar.gz ${{ steps.set-vars.outputs.repo-id }}.files

      - name: Remove release
        uses: cb80/delrel@latest
        with:
          tag: ${{ steps.prepare.outputs.arch }}
          token: ${{ secrets.TOKEN }}

      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.prepare.outputs.arch }}
          name: Arch Linux ARM AUR Build ${{ github.run_number }} from ${{ steps.set-vars.outputs.date }} for ${{ steps.prepare.outputs.arch }}
          body: |
            To use this repository, please append the following to `/etc/pacman.conf`:
            ```
            [${{ steps.set-vars.outputs.repo-id }}]
            SigLevel = Required
            Server = https://github.com/${{ github.repository }}/releases/download/${{ steps.prepare.outputs.arch }}
            ```
          artifacts: |
            ${{ runner.temp }}/*
          draft: false
          prerelease: false
          token: ${{ secrets.TOKEN }}
